{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "The template used to create an ECS Service from the ECS Console.",
	"Parameters": {
		"ECSClusterName": {
			"Type": "String",
			"Default": "Event-Cluster"
		},
		"ECSServiceName": {
			"Type": "String",
			"Default": "eventfinder-service"
		},
		"SecurityGroupIDs": {
			"Type": "CommaDelimitedList",
			"Default": "sg-098d24d1c09b6ae7d"
		},
		"SubnetIDs": {
			"Type": "CommaDelimitedList",
			"Default": "subnet-0ddbc40c04f909c28,subnet-05f1bfcc200ccdb20"
		},
		"VpcID": {
			"Type": "String",
			"Default": "vpc-01dc4c45795329c38"
		},
		"LoadBalancerName": {
			"Type": "String",
			"Default": "eventfinder-main-elb"
		},
		"ApplicationName": {
			"Type": "String",
			"Default": "AppECS-Event-Cluster-eventfinder-service"
		},
		"DeploymentGroupName": {
			"Type": "String",
			"Default": "DgpECS-Event-Cluster-eventfinder-service"
		}
	},
	"Resources": {
		"ECSService": {
			"Type": "AWS::ECS::Service",
			"Properties": {
				"Cluster": "Event-Cluster",
				"CapacityProviderStrategy": [
					{
						"CapacityProvider": "FARGATE",
						"Base": 0,
						"Weight": 1
					}
				],
				"TaskDefinition": "arn:aws:ecs:us-west-2:650251709711:task-definition/eventfinder-definition:16",
				"ServiceName": "eventfinder-service",
				"SchedulingStrategy": "REPLICA",
				"DesiredCount": 1,
				"AvailabilityZoneRebalancing": "ENABLED",
				"LoadBalancers": [
					{
						"ContainerName": "nginx",
						"ContainerPort": 5000,
						"LoadBalancerName": {
							"Ref": "AWS::NoValue"
						},
						"TargetGroupArn": {
							"Ref": "TargetGroup"
						}
					}
				],
				"NetworkConfiguration": {
					"AwsvpcConfiguration": {
						"AssignPublicIp": "ENABLED",
						"SecurityGroups": {
							"Ref": "SecurityGroupIDs"
						},
						"Subnets": {
							"Ref": "SubnetIDs"
						}
					}
				},
				"PlatformVersion": "LATEST",
				"DeploymentController": {
					"Type": "CODE_DEPLOY"
				},
				"ServiceConnectConfiguration": {
					"Enabled": false
				},
				"Tags": [],
				"EnableECSManagedTags": true
			},
			"DependsOn": [
				"Listener"
			]
		},
		"LoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Type": "application",
				"Name": "eventfinder-main-elb",
				"SecurityGroups": {
					"Ref": "SecurityGroupIDs"
				},
				"Subnets": {
					"Ref": "SubnetIDs"
				}
			}
		},
		"TargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPath": "/",
				"Name": "tg-Event--eventfinder-service",
				"Port": 80,
				"Protocol": "HTTP",
				"TargetType": "ip",
				"HealthCheckProtocol": "HTTP",
				"VpcId": {
					"Ref": "VpcID"
				},
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "300"
					}
				]
			}
		},
		"Listener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "TargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "LoadBalancer"
				},
				"Port": 80,
				"Protocol": "HTTP"
			}
		},
		"TargetGroupTwo": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPath": "/",
				"Name": "tg-Event--eventfinder-service-2",
				"Port": 80,
				"Protocol": "HTTP",
				"TargetType": "ip",
				"HealthCheckProtocol": "HTTP",
				"VpcId": {
					"Ref": "VpcID"
				},
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "300"
					}
				]
			}
		},
		"CodeDeployDeploymentGroup": {
			"Type": "AWS::CodeDeploy::DeploymentGroup",
			"Properties": {
				"ApplicationName": {
					"Ref": "ApplicationName"
				},
				"DeploymentGroupName": {
					"Ref": "DeploymentGroupName"
				},
				"DeploymentConfigName": "CodeDeployDefault.ECSAllAtOnce",
				"AutoRollbackConfiguration": {
					"Enabled": true,
					"Events": [
						"DEPLOYMENT_FAILURE",
						"DEPLOYMENT_STOP_ON_REQUEST"
					]
				},
				"BlueGreenDeploymentConfiguration": {
					"DeploymentReadyOption": {
						"ActionOnTimeout": "CONTINUE_DEPLOYMENT",
						"WaitTimeInMinutes": 0
					},
					"TerminateBlueInstancesOnDeploymentSuccess": {
						"Action": "TERMINATE",
						"TerminationWaitTimeInMinutes": 60
					}
				},
				"DeploymentStyle": {
					"DeploymentOption": "WITH_TRAFFIC_CONTROL",
					"DeploymentType": "BLUE_GREEN"
				},
				"LoadBalancerInfo": {
					"TargetGroupPairInfoList": [
						{
							"ProdTrafficRoute": {
								"ListenerArns": [
									{
										"Fn::GetAtt": [
											"Listener",
											"ListenerArn"
										]
									}
								]
							},
							"TargetGroups": [
								{
									"Name": {
										"Fn::GetAtt": [
											"TargetGroup",
											"TargetGroupName"
										]
									}
								},
								{
									"Name": {
										"Fn::GetAtt": [
											"TargetGroupTwo",
											"TargetGroupName"
										]
									}
								}
							]
						}
					]
				},
				"ServiceRoleArn": "arn:aws:iam::650251709711:role/CodeDeployServiceRole",
				"ECSServices": [
					{
						"ClusterName": {
							"Ref": "ECSClusterName"
						},
						"ServiceName": {
							"Ref": "ECSServiceName"
						}
					}
				],
				"Tags": []
			},
			"DependsOn": [
				"CodeDeployApplication"
			]
		},
		"CodeDeployApplication": {
			"Type": "AWS::CodeDeploy::Application",
			"Properties": {
				"ApplicationName": {
					"Ref": "ApplicationName"
				},
				"ComputePlatform": "ECS",
				"Tags": []
			},
			"DependsOn": [
				"ECSService"
			]
		}
	},
	"Outputs": {
		"ClusterName": {
			"Description": "The cluster used to create the service.",
			"Value": {
				"Ref": "ECSClusterName"
			}
		},
		"ECSService": {
			"Description": "The created service.",
			"Value": {
				"Ref": "ECSService"
			}
		},
		"LoadBalancer": {
			"Description": "The created load balancer.",
			"Value": {
				"Ref": "LoadBalancer"
			}
		},
		"Listener": {
			"Description": "The created listener.",
			"Value": {
				"Ref": "Listener"
			}
		},
		"TargetGroup": {
			"Description": "The created target group.",
			"Value": {
				"Ref": "TargetGroup"
			}
		},
		"CodeDeployDeploymentGroup": {
			"Description": "The created CodeDeploy deployment group.",
			"Value": {
				"Ref": "CodeDeployDeploymentGroup"
			}
		},
		"CodeDeployApplication": {
			"Description": "The created CodeDeploy application.",
			"Value": {
				"Ref": "CodeDeployApplication"
			}
		},
		"TargetGroupTwo": {
			"Description": "The created target group 2.",
			"Value": {
				"Ref": "TargetGroupTwo"
			}
		}
	}
}