AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Infrastructure for Java App using existing resources'

Parameters:
  VPCStackName:
    Description: >
      Name of the VPC/infrastructure stack.
      (This must match the export names; here we assume "EventFinder-VPC")
    Type: String
    Default: Week5-VPC-VPCID

  TaskDefinition:
    Description: ARN of the existing ECS Task Definition
    Type: String

  ContainerPort:
    Description: Port the container exposes
    Type: Number
    Default: 5000

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-Cluster"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Cluster"

  # (Optional) If you already have a Task Execution Role and Task Role defined elsewhere,
  # you can remove these. Otherwise, you may choose to keep them.
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # CloudWatch Logs Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 30

  # ECS Service using the existing Task Definition
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerRule
    Properties:
      ServiceName: !Sub "${AWS::StackName}-Service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentController:
        Type: CODE_DEPLOY
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: EventFinder-VPC-ECSSecurityGroup
          Subnets:
            - Fn::ImportValue: EventFinder-VPC-PrivateSubnet1
            - Fn::ImportValue: EventFinder-VPC-PrivateSubnet2
      LoadBalancers:
        - ContainerName: eventfinder
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !ImportValue EventFinder-VPC-BlueTargetGroup
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  # ALB Listener Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !ImportValue EventFinder-VPC-BlueTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !ImportValue EventFinder-VPC-ProductionListener
      Priority: 1

  # Auto Scaling
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub "service/${ECSCluster}/${ECSService.Name}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"

  ScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-ScalingPolicy-CPU"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

  ScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-ScalingPolicy-Memory"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

  # CodeDeploy Resources
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${AWS::StackName}-Application"
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub "${AWS::StackName}-DeploymentGroup"
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !GetAtt ECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !ImportValue EventFinder-VPC-ProductionListener
            TargetGroups:
              - Name: !Select [1, !Split ["/", !ImportValue EventFinder-VPC-BlueTargetGroup]]
              - Name: !Select [1, !Split ["/", !ImportValue EventFinder-VPC-GreenTargetGroup]]

  # CodeDeploy Service Role
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

Outputs:
  ECSCluster:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ECSCluster"

  ECSService:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${AWS::StackName}-ECSService"

  CodeDeployApplication:
    Description: CodeDeploy Application
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${AWS::StackName}-CodeDeployApplication"

  CodeDeployDeploymentGroup:
    Description: CodeDeploy Deployment Group
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub "${AWS::StackName}-CodeDeployDeploymentGroup"
